<?php defined("PRIVATE") or die("Permission Denied. Cannot Access Directly.");

/*
 *      Session utility for DATOID
 */

class Session {

    private static $id, $data = array(), $history = array();
    
    public static function start() {
        $name = Config::get('session.name','datoid');
        self::$id = Input::cookie($name);       
        
        // no cookie present - generate new id, log url, store in db
        if (self::$id === false) {         
            self::regenerate();
        }
        else {
        
            // get session data
            $options = array(
                'datoid' => 'sessions',
                'wherefield' => 'id',
                'wherevalue' => self::$id,
                'limit' => 1
            );
            $sel = new Selector($options);
            
            // an empty selector means we need a new session
            if ($sel->data() === false) {
                self::regenerate();                           
            }
            // otherwise we've found an existing session, load up the data
            else {
                self::$data = $sel->data('data');
                self::$history = $sel->data('history');
                
                array_unshift(self::$history, URL::raw());               
            }
        }
    }
    
    public static function end() {
        // cookie details
        $name = Config::get('session.name', 'datoid');
        $expire = time() + Config::get('session.expire', 86400);
        $path = Config::get('session.path', '/');
        $domain = Config::get('session.domain', '');
        
        // only save up to the number of history steps set in config
        if(count(self::$history) > Config::get('app.history_steps', 10))
            array_pop(self::$history);
        
        // remove any history items generated by ajax calls
        self::$history = array_filter(self::$history, array('Session','cleanhistory'));
        
        // update sessions on the database
        $data = array(
            'date' => time(),
            'data' => serialize(self::$data),
            'history' => serialize(self::$history)
        );
        
        DB::update('sessions', $data, array('id'=>self::$id));
        
        // create a cookie so we can access the session later
        setcookie($name, self::$id, $expire, $path, $domain);
    }
    
    public static function get($key, $default = false) {
        return isset(self::$data[$key]) ? self::$data[$key] : $default;
    }
    
    public static function history($steps = 1, $default = false) {
        if(isset(self::$history) && !empty(self::$history)) {
            
            // return url that is $steps back in history
            if($steps > 0) {
                return (count(self::$history) > $steps) ? self::$history[$steps] : $default;
            }
            // remove $steps (usually 1) entries from history
            else {
                $steps = abs($steps);
                array_splice(self::$history, 0, $steps);
            }
        }
        else
            return $default;
    }
    
    public static function set($key, $value) {
        self::$data[$key] = $value;
    }
    
    public static function forget($key) {
        if(isset(self::$data[$key])) {
            unset(self::$data[$key]);
        }
    }
    
    public static function regenerate($clearhistory = true) {
        self::$id = self::randomstr(32);         
        self::$data = array();
        
        if($clearhistory)
            self::$history = array(URL::raw());
        else
            array_unshift(self::$history, URL::raw ());
        
        DB::insert('sessions', array(
            'id' => self::$id,
            'date' => time(),
            'data' => serialize(self::$data),
            'history' => serialize(self::$history)
        ));
    }
    
    public static function cleanhistory($str) {
        return (strpos($str, 'ajax') === false) ? true : false;
    }
    
    private static function gc() {
        // only run 10% of the time
        if(mt_rand(1, 100) <= 10) {
            $expire = time() - Config::get('session.expire', 86400);
            $sql = "DELETE FROM sessions WHERE date < $expire";
            DB::query($sql, false);
        }
    }
    
    private static function randomstr($length) {
        $pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        return substr(str_shuffle(str_repeat($pool, 5)), 0, $length);
    }
}